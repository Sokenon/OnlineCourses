@model CourseViewModel
@{
    int numberModule = 1;
}

<head>
    <meta charset="utf-8" />
    <title>@Model.Title</title>
    <style>
        .module {
            margin-bottom: 10px;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
        }

            .module summary {
                font-weight: bold;
                cursor: pointer;
            }

        .lessons {
            margin-top: 10px;
            padding-left: 20px;
        }

            .lessons li {
                list-style-type: none;
                margin: 5px 0;
            }
    </style>

</head>
<script>
    function visability(label, input, submit, delete, lessons) {
        if (document.getElementById(label).style.display == "none") {
            document.getElementById(label).style.display = "block";
            document.getElementById(input).style.display = "block";
            document.getElementById(submit).style.display = "block";
            delete ? document.getElementById(submit + "delete").style.display = "block";
            lessons ? document.getElementById(submit + "lessons").style.display = "block";
        }
        else {
            document.getElementById(label).style.display = "none";
            document.getElementById(input).style.display = "none";
            document.getElementById(submit).style.display = "none";
            delete ? document.getElementById(submit + "delete").style.display = "none";
            lessons ? document.getElementById(submit + "lessons").style.display = "none";
        }
    }

    async function editModule(id) {
        const response = await fetch("/Course/EditModule", {
            method: "PUT",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: id,
                Title: document.getElementById(id + "new").value
            })
        });
        if (response.status === 200) {
            window.location.reload();
        }
    }

    async function editCourseTitle(id) {
        const response = await fetch("/Course/EditCourse", {
            method: "PUT",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: id,
                Title: document.getElementById("inputtitle").value
            })
        });
        if (response.status === 200) {
            window.location.reload();
        }
    }

    async function editCourseDescription(id) {
        const response = await fetch("/Course/EditCourse", {
            method: "PUT",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: id,
                Description: document.getElementById("inputdescription").value
            })
        });
        if (response.status === 200) {
            window.location.reload();
        }
    }

    async function deleteCourse(id) {
        const response = await fetch("/Course/Delete", {
            method: "DELETE",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: id
            })
        });
        if (response.status === 200) {
            window.location.href = '/User/PersonalAccount';
        }
    }

    async function deleteModule(id) {
        const response = await fetch("/Course/DeleteModule", {
            method: "DELETE",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Id: id
            })
        });
        if (response.status === 200) {
            window.location.reload();
        }
    }

    async function createModule(id) {
        const response = await fetch("/Course/CreateModule", {
            method: "POST",
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                Title: document.getElementById(id).value,
                CourseId: @Model.Id.ToString()
            })
        });
        if (response.status === 200) {
            window.location.reload();
        }
    }

    async function lessons(id) {
        window.location.href = ('/Course/Lessons?course=' + @Model.Id.ToString() + '&module=' + id);
    }


    // async function editLesson(id) {
    //     const response = await fetch("/Course/EditLesson", {
    //         method: "PUT",
    //         headers: { "Accept": "application/json", "Content-Type": "application/json" },
    //         body: JSON.stringify({
    //             Id: id,
    //             Title: document.getElementById(("inputlesson" + id)).value
    //         })
    //     });
    //     if (response.status === 200) {
    //         window.location.reload();
    //     }
    // }
</script>
<body>
    <div>
        <h1>Редактор</h1>
        <input onclick="deleteCourse(@Model.Id.ToString())" style="display:block;" type="submit" id=delete value="Удалить курс" />


        <h2 id="title" onclick="visability('labeltitle', 'inputtitle', '@Model.Id.ToString()', false, false)">@Model.Title ✏</h2>
        <label style="display:none;" id="labeltitle">Введите новое название</label>
        <input style="display:none;" type="text" id="inputtitle" />
        <input onclick="editCourseTitle(@Model.Id.ToString())" style="display:none;" type="submit" id=@Model.Id.ToString() value="Сохранить" />
        <br />

        <h3 id="description" onclick="visability('labeldescription', 'inputdescription' , '@Model.Id.ToString()', false, false)">@Model.Title>@Model.Description ✏</h3>
        <label style="display:none;" id="labeldescription">Введите новое описание</label>
        <textarea id="inputdescription" style="display:none; none width: 300px; height: 100px;"></textarea>
        <input onclick="editCourseDescription(@Model.Id.ToString())" style="display:none;" type="submit" id=@Model.Id.ToString() value="Сохранить" />

        <br />
    </div>

    @if (Model.Modules != null)
    {
        @foreach (ModuleViewModel module in @Model.Modules!)
        {
            <div class="module">
                <h2 onclick="visability('@("labelmodule" + @module.Id.ToString())', '@(module.Id.ToString() + "new")', '@(module.Id.ToString())', true, true)">Модуль @numberModule: @module.Title </h2>
                <label style="display:none;" id="labelmodule" + @module.Id.ToString())>Введите новое название</label>
                <input style="display:none;" type="text" id=@(module.Id.ToString() + "new") />
                <input onclick="editModule(@module.Id.ToString())" style="display:none;" type="submit" id=@module.Id.ToString() value="Сохранить" />
                <input onclick="deleteModule(@module.Id.ToString())" style="display:none;" type="submit" id=@(module.Id.ToString() + "delete") value="Удалить модуль" />
                <input onclick="lessons(@module.Id.ToString())" style="display:none;" type="submit" id=@(module.Id.ToString() + "lessons") value="Перейти к редактированию уроков" />


            </div>
        }
    }
    <div>
        <label style="display:block;" id=labelModuleTitle>Введите название нового модуля</label>
        <input style="display: block;" type="text" id=newModuleTitle />
        <input onclick="create('newModuleTitle')" style="display:block;" type="submit" id=create value="Создать новый модуль" />
    </div>


@*     @foreach (ModuleViewModel module in @Model.Modules!)
    {
        <div class="module">
            <details>
                <summary onclick="visability('@("labelmodule" + @module.Id.ToString())', '@(module.Id.ToString() + "new")', '@(module.Id.ToString())')">Модуль @numberModule: @module.Title </summary>
                <label style="display:none;" id="labelmodule" + @module.Id.ToString())>Введите новое название</label>
                <input style="display:none;" type="text" id=@(module.Id.ToString() + "new") />
                <input onclick=editModule(@module.Id.ToString()) style="display:none;" type="submit" id=@module.Id.ToString() value="Сохранить" />
                <ul class="lessons">
                    @foreach (LessonViewModel lesson in module.Lessons!)
                    {
                        <a class="nav-link text-dark" onclick="visability('@("labellesson" + @lesson.Id.ToString())', '@("inputlesson" + @lesson.Id.ToString())', '@lesson.Id.ToString()')">Урок @numberLesson: @lesson.Title </a>
                        <label style="display:none;" id="labellesson" + @lesson.Id.ToString()>Введите новое название</label>
                        <input style="display:none;" type="text" id="inputlesson" + @lesson.Id />
                        <input onclick=editLesson(@lesson.Id.ToString()) style="display:none;" type="submit" id=@lesson.Id.ToString() value="Сохранить" />
                    }
                </ul>
            </details>
        </div>
    }
 *@


</body>